#+TITLE: Emacs Init

* Bootstrap DOOM Stuff
#+BEGIN_SRC emacs-lisp
(setq user-full-name "Tom Purl"
      user-mail-address "tom@tompurl.com")

(setq doom-theme
      ;; 'doom-fairy-floss ;; Really nice purplish theme
      ;; 'kaolin-valley-light
      ;; Nice, light theme that's a lot like solarized but more green'
      'modus-operandi   ;; By far the most accessible theme but a little boring
      )
(setq org-directory "~/gtd/org")
(setq display-line-numbers-type t)
#+END_SRC

* Eye Candy
** Fonts
#+BEGIN_SRC emacs-lisp
(setq doom-font (font-spec :family "Hack" :size 15)
      doom-variable-pitch-font (font-spec :family "ETBembo" :size 18))
(after! doom-themes
  (setq doom-themes-enable-bold t
        doom-themes-enable-italic t))
#+END_SRC

The following customizations are from https://zzamboni.org/post/beautifying-org-mode-in-emacs/:

#+BEGIN_SRC emacs-lisp
(after! org
  (setq org-hide-emphasis-markers t)

  (let* ((variable-tuple
          (cond ((x-list-fonts "ETBembo")         '(:font "ETBembo"))
                ((x-list-fonts "Source Sans Pro") '(:font "Source Sans Pro"))
                ((x-list-fonts "Lucida Grande")   '(:font "Lucida Grande"))
                ((x-list-fonts "Verdana")         '(:font "Verdana"))
                ((x-family-fonts "Sans Serif")    '(:family "Sans Serif"))
                (nil (warn "Cannot find a Sans Serif Font.  Install Source Sans Pro."))))
         (base-font-color     (face-foreground 'default nil 'default))
         (headline           `(:inherit default :weight bold :foreground ,base-font-color)))

    (custom-theme-set-faces
     'user
     `(org-level-8 ((t (,@headline ,@variable-tuple))))
     `(org-level-7 ((t (,@headline ,@variable-tuple))))
     `(org-level-6 ((t (,@headline ,@variable-tuple))))
     `(org-level-5 ((t (,@headline ,@variable-tuple))))
     `(org-level-4 ((t (,@headline ,@variable-tuple :height 1.1))))
     `(org-level-3 ((t (,@headline ,@variable-tuple :height 1.25))))
     `(org-level-2 ((t (,@headline ,@variable-tuple :height 1.5))))
     `(org-level-1 ((t (,@headline ,@variable-tuple :height 1.75))))
     `(org-document-title ((t (,@headline ,@variable-tuple :height 2.0 :underline nil))))))

  (custom-theme-set-faces
   'user
   '(org-block ((t (:inherit fixed-pitch))))
   '(org-code ((t (:inherit (shadow fixed-pitch)))))
   '(org-document-info ((t (:foreground "dark orange"))))
   '(org-document-info-keyword ((t (:inherit (shadow fixed-pitch)))))
   '(org-indent ((t (:inherit (org-hide fixed-pitch)))))
   '(org-link ((t (:foreground "royal blue" :underline t))))
   '(org-meta-line ((t (:inherit (font-lock-comment-face fixed-pitch)))))
   '(org-property-value ((t (:inherit fixed-pitch))) t)
   '(org-special-keyword ((t (:inherit (font-lock-comment-face fixed-pitch)))))
   '(org-table ((t (:inherit fixed-pitch :foreground "#83a598"))))
   '(org-tag ((t (:inherit (shadow fixed-pitch) :weight bold :height 0.8))))
   '(org-verbatim ((t (:inherit (shadow fixed-pitch)))))))
#+END_SRC

** Doom Banner
#+BEGIN_SRC emacs-lisp
(setq +doom-dashboard-banner-dir "/home/tom/.doom.d/banners")
#+END_SRC
** Nyan Cat
Adds the Nyan Cat to your modeline ðŸ˜ºðŸ˜ºðŸ˜½ðŸ˜½
#+BEGIN_SRC emacs-lisp
(use-package! nyan-mode)
#+END_SRC

* ORG !!!
** Keymaps
#+BEGIN_SRC emacs-lisp
  (define-key global-map "\C-cl" 'org-store-link)
  (define-key global-map "\C-ca" 'org-agenda)
    (add-hook 'org-mode-hook
            (lambda ()
              (local-set-key (kbd "<f5>") #'org-toggle-inline-images)
              (local-set-key (kbd "C-c n s") #'org-narrow-to-subtree)
              (local-set-key (kbd "C-c w") #'widen)))
  (define-key global-map "\C-cc" 'org-capture)
  (global-set-key (kbd "C-c h") 'open-org-html-file-in-browser)
  (global-set-key (kbd "<f6>") (lambda() (interactive)(org-publish-current-file)))
#+END_SRC
** Navigation
*** Open links in the same window, from here:

- http://stackoverflow.com/a/13075322

#+BEGIN_SRC emacs-lisp
  (setq org-link-frame-setup (quote ((vm . vm-visit-folder-other-frame)
                                     (vm-imap . vm-visit-imap-folder-other-frame)
                                     (gnus . org-gnus-no-new-news)
                                     (file . find-file)
                                     (wl . wl-other-frame))))
#+END_SRC
*** Jump to a task's LOGBOOK
    #+BEGIN_SRC emacs-lisp
      (fset 'tp/org/jump-to-logbook
            (lambda (&optional arg)
              "Keyboard macro."
              (interactive "p")
              (kmacro-exec-ring-item (quote ([19 108 111 103 98 return] 0 "%d")) arg)))
      (global-set-key (kbd "\C-ck") 'tp/org/jump-to-logbook)
    #+END_SRC
*** Move the last bullet in a sublist to the top of a sublist

    I admit that this is a bit hacky because it requires the following:

    1. Your mouse pointer has to be on the parent bullet of the sub-list.
    2. The parent bullet needs another bullet at the same level beneath it.

    However, it works really well for the intended purpose, which is taking sub-bullets
    created by a capture template and moving them to the top of a sub-list.
    #+BEGIN_SRC emacs-lisp
      (defun tp/org/move-last-subbullet-to-top-of-sublist ()
        "Move the last sub-bullet to the top of the list of sub-bullets."
        (interactive)
        (org-forward-heading-same-level 1)
        (forward-line -1)
        (kill-visual-line 1)
        (org-backward-heading-same-level 1)
        (forward-line 1)
        (org-yank)
        (forward-line -1))
    #+END_SRC
** Org-agenda
*** Custom Views

Here's my custom agenda view that uses "column view".

#+BEGIN_SRC emacs-lisp
(use-package! org-super-agenda
  :config
  (org-super-agenda-mode)
  :init
  (setq org-super-agenda-groups
        '((:log t)  ; Automatically named "Log"
          (:name "Schedule"
           :time-grid t)
          (:name "Today"
           :scheduled today)
          (:habit t)
          (:name "Due today"
           :deadline today)
          (:name "Overdue"
           :deadline past)
          (:name "Due soon"
           :deadline future)
          (:name "Unimportant"
           :todo ("SOMEDAY" "MAYBE" "CHECK" "TO-READ" "TO-WATCH")
           :order 100)
          (:name "Waiting..."
           :todo "WAITING"
           :order 98)
          (:name "Scheduled earlier"
           :scheduled past))
        org-agenda-prefix-format
        '((agenda . " %i %-12:c%?-12t%-6e% s")
          (todo . " %i %-12:c")
          (tags . " %i %-12:c")
          (search . " %i %-12:c")))
  (org-agenda-list))
#+END_SRC

For some strange reason Doom Emacs assumes that you always view the entire week
when looking at your agenda. I only like to look at today, which means that I
have to change a few of the defaults in their org module that I wouldn't have to
change if I was using vanilla Emacs.

Doom Emacs is still awesome and worth it, but dang, things like this can be
annoying.

#+BEGIN_SRC emacs-lisp
(after! org
  (setq org-agenda-span 1)
  (setq org-agenda-start-day "today"))
#+END_SRC
*** Persisting org-agenda-files
I want the value of =org-agenda-files= to be editable during runtime but also to
persist between sessions. Apparently I'm in a very small minority :-)

- https://www.reddit.com/r/emacs/comments/nfb519/how_to_update_orgagendafiles_and_persist_between/gykk9hh?utm_source=share&utm_medium=web2x&context=3

#+BEGIN_SRC emacs-lisp
(after! savehist
  (add-to-list 'savehist-additional-variables 'org-agenda-files))
#+END_SRC

** Org-Clock
   Set your default parameters for clock reports when they are viewed i the agenda view:

#+BEGIN_SRC emacs-lisp
  (setq org-agenda-clockreport-parameter-plist
        '(:scope agenda-with-archives :formula % :maxlevel 10 :tags t :fileskip0 t :compact t :narrow 60 :score 0))
#+END_SRC

   If I'm idle for more than X minutes then ask me what to do with the clock time:

   #+BEGIN_SRC emacs-lisp
     (setq org-clock-idle-time 30)
   #+END_SRC

** Org-capture
*** Templates
#+BEGIN_SRC emacs-lisp
(after! org
  (setq org-capture-templates
        '(
          ("t" "Todo" entry (file+headline (lambda () (concat org-directory "/" "inbox.org")) "In-Process") "* TODO %? %^g")
          ("w" "Work Log" entry (file+headline (lambda () (concat org-directory "/" "WorkLogs.org")) "On-Deck") "** %(create-org-link 1) %?")
          ("d" "Daily Review" entry (file+headline (lambda () (concat org-directory "/" "Personal_Reviews.org")) "Daily") "** %(create-org-link 1 \"Daily Review\") %?")
          ("k" "Weekly Review" entry (file+headline (lambda () (concat org-directory "/" "Personal_Reviews.org")) "Weekly") "** %(create-org-link 1 \"Weekly Review\") %?")
          ("s" "Start of Week Check-In" entry (file+headline (lambda () (concat org-directory "/" "Personal_Reviews.org")) "Weekly") "** %(create-org-link 1 \"Start of Week Check-In\") %?")
          ("r" "Research Note" entry (file+headline (lambda () (concat org-directory "/" "ResearchNotes.org")) "In-Process") "** %(create-org-link nil) %?")
          ("l" "Lessons Learned" entry (file+headline (lambda () (concat org-directory "/" "LessonsLearned.org")) "Drafts") "** %(create-org-link nil) %?")
          ("m" "Meeting Minute" entry (file+headline (lambda () (concat org-directory "/" "MeetingMinutes.org")) "In-Process") "** %(create-org-link 1) %?")
          )))
#+END_SRC
** To-do Lists
*** Workflow States

#+BEGIN_SRC emacs-lisp
;; (after! org
;;   (setq org-todo-keywords
;;         '((sequence "TODO(t)" "WAIT(w@)" "|" "DONE(d!)" "CANCELED(c@)"))))
#+END_SRC

I'd also like to move transition logging to a drawer to keep things from getting
too cluttered:

#+BEGIN_SRC emacs-lisp
(after! org
  (setq org-log-into-drawer 't))
#+END_SRC

*** Misc Props
Have org measure todo completion percentage recursively. =nil= means
that you want it to look recursively.

#+BEGIN_SRC emacs-lisp
  (setq org-hierarchical-todo-statistics nil)
#+END_SRC

** Functions
**** Calculating Dates
#+BEGIN_SRC emacs-lisp
  (defvar org-link-date-stamp-format "%y%m%d"
    "Format of date stamps to use in Org links")

  (defun add-date-stamp-to-file-name (org-link)
    "Add a date stamp to the file name portion of an org link"
    (replace-regexp-in-string ":"
                              (concat ":"
                                      (format-time-string org-link-date-stamp-format (current-time))
                                      "-") org-link))

  (defun add-date-stamp-to-link-title (org-link)
    "Add a date stamp to the title portion of an org link"
    (replace-regexp-in-string "\\]\\["
                              (concat "]["
                                      (format-time-string org-link-date-stamp-format (current-time))
                                      " - ") org-link))
#+END_SRC
**** Misc

This is just a minor utility function.

#+BEGIN_SRC emacs-lisp
  (defun escape-file-titles (title)
    "Take an arbitrary string and replace all of the bad chars with
    underscores"
    (replace-regexp-in-string " " "_" title))
#+END_SRC

Here's a much better version of my create-org-link function courtesy
of -> http://emacs.stackexchange.com/a/12166/8228

#+BEGIN_SRC emacs-lisp
  (defun create-org-link (addDate? &optional title)
    "Takes a human-readable title for a link and returns a
     nicely-formatted file link."
    (interactive)
    (unless title
      (setq title
            (read-string "Please enter a title: ")))
    (let ((plain-file-link
           (format "[[file:%s.org][%s]]" (escape-file-titles title) title)))
      (let ((formatted-file-link
             (if addDate?
                 (add-date-stamp-to-file-name (add-date-stamp-to-link-title plain-file-link))
               plain-file-link)))
        (if (called-interactively-p)
            (insert formatted-file-link)
          formatted-file-link))))
#+END_SRC

**** Browser-related
#+BEGIN_SRC emacs-lisp
  (defun org-file-name-convert-to-html (org-file-name)
    "Convert an org file name into its HTML eqlivalent"
    (replace-regexp-in-string
     "\\(.*\\)\\/org\\/\\(.*\\)\.org$"
     "\\1/org/\\2.html" org-file-name))

  (defun open-org-html-file-in-browser ()
    "Open the current html version of the current org file in a web
    browser."
    (interactive)
    (browse-url-of-file (org-file-name-convert-to-html (buffer-file-name))))
#+END_SRC
** Org-publish
*** Bootstrap

#+BEGIN_SRC emacs-lisp
(require 'ox-publish)
#+END_SRC

#+RESULTS:
: ox-publish

** Yasnippet
#+BEGIN_SRC emacs-lisp
  ;; (defun yas/org-very-safe-expand ()
  ;;   (let ((yas/fallback-behavior 'return-nil)) (yas/expand)))

  ;; (add-hook 'org-mode-hook
  ;;           (lambda ()
  ;;             (make-variable-buffer-local 'yas/trigger-key)
  ;;             (setq yas/trigger-key [tab])
  ;;             (add-to-list 'org-tab-first-hook 'yas/org-very-safe-expand)
  ;;             (define-key yas/keymap [tab] 'yas/next-field)))
#+END_SRC

** Babel

Here's the languages that I can interpret. Note that there's a difference between the way that the =shell= language is loaded between older and newer versions of Emacs. This my hacky way of fixing it for now:

#+BEGIN_SRC emacs-lisp
    (cond
     ((string-equal system-type "windows-nt")
      (progn
        (org-babel-do-load-languages
         'org-babel-load-languages
         '((js . t)
           (emacs-lisp . t)
           (shell . t)
           (python . t)
           (dot . t)
           (plantuml . t)))))
     ((string-equal system-type "gnu/linux")
      (progn
        (org-babel-do-load-languages
         'org-babel-load-languages
         '((js . t)
           (emacs-lisp . t)
           (shell . t)
           (python . t)
           (dot . t)
           (restclient . t)
           (plantuml . t))))))
#+END_SRC

I don't want to manually confirm that code written in the following
languages can be executed:

#+BEGIN_SRC emacs-lisp
  (defun my-org-confirm-evaluate (lang body)
    (and (not (string= lang "js"))
         (not (string= lang "dot"))
         (not (string= lang "python"))))

  (setq org-confirm-babel-evaluate 'my-org-confirm-evaluate)
#+END_SRC


Here are my global =src= block headers. So far, all this does is
ensure that the publishing process never executes the code in src
block (unless it's overrided at a lower lever of course).

#+BEGIN_SRC emacs-lisp
  (setq org-babel-default-header-args
        (cons '(:eval . "never-export")
              (assq-delete-all :eval org-babel-default-header-args)))
#+END_SRC

** Tags
These are the tags that I will use the most when creating new tasks.


#+BEGIN_SRC emacs-lisp
  (cond
   ((not (string= "poochie" (system-name)))
    (progn
      ;; Work-related tags
      (setq org-tag-alist '(
                            ("c_admin" . ?a)
                            ("c_coding" . ?c)
                            ("c_documentation" . ?d)
                            ("goal" . ?g)
                            ("c_hardware_troubleshooting" . ?h)
                            ("c_training" . ?i)
                            ("c_knowledge_transfer" . ?k)
                            ("c_manual_testing" . ?m)
                            ("c_monitoring" . ?n)
                            ("c_meetings" . ?e)
                            ("objective" . ?o)
                            ("c_hr" . ?r)
                            ("c_agile_process_stuff" . ?s)
                            ("today" . ?t)
                            ("c_system_maintenance" . ?z)))))
   ((string= "poochie" (system-name))
    (progn
      (setq org-tag-alist '(
                            ("c_bills" . ?b)
                            ("c_chore" . ?c)
                            ("c_errand" . ?e)
                            ("c_self_care" . ?s)
                            ("today" . ?t))))))
#+END_SRC

Here's the tags that I exclude from tag inheritance:

#+BEGIN_SRC emacs-lisp
  (setq org-tags-exclude-from-inheritance (quote ("crypt")))
#+END_SRC
** Images
   This turns on inline images at startup:

   #+BEGIN_SRC emacs-lisp
     (setq org-startup-with-inline-images t)
   #+END_SRC

   ... and this scales them down when viewing them inline:

   #+BEGIN_SRC emacs-lisp
     (setq org-image-actual-width t)
   #+END_SRC
** Property Help
*** Inherited Properties
    Here's my list of properties that can be inherited. I like to keep this small so
    as not to adversely affect the speed of agenda searches.

    #+BEGIN_SRC emacs-lisp
      (setq org-use-property-inheritance
            (list "FEATURE_NUM"
                  "STORY_NUM"
                  "ORDERED"))
    #+END_SRC
** Priorities
Let's make it A-E and make them looks cool.
#+BEGIN_SRC emacs-lisp
(after! org (setq org-highest-priority ?A
                  org-lowest-priority ?E
                  org-default-priority ?C
                  org-fancy-priorities-mode nil))
#+END_SRC

* Zettelkasten / Note Taking / PKM
** org-roam
#+BEGIN_SRC emacs-lisp
(use-package! org-roam
  :hook
  (after-init . org-roam-mode)
  :custom
  (if (string= "poochie" (system-name))
      (org-roam-directory "~/Nextcloud/Documents/org/roam/")
    (org-roam-directory "/home/tom/gtd/org/roam"))
  :bind (:map org-roam-mode-map
         (("C-c n l" . org-roam)
          ("C-c n f" . org-roam-find-file)
          ("C-c n g" . org-roam-graph))
         :map org-mode-map
         (("C-c n i" . org-roam-insert))
         (("C-c n I" . org-roam-insert-immediate))))
#+END_SRC
** org-web-tools
This is a fantastic plugin that makes it easy to copy things from the web into
=org-mode= docs. This is especially useful when I want to store an offline copy
of a web page and then annotate it in =org-roam=.

#+BEGIN_SRC emacs-lisp
(require 'org-web-tools)
#+END_SRC
** Fleeting Notes
The best place I've found for storing *fleeting notes* that I can easily access
and update on my laptop and phone is my Nextcloud Notes instance.

This function automatically jumps to today's journal file and creates it if
necessary.

#+BEGIN_SRC emacs-lisp
(defun tp/roam/goto-today-journal-entry ()
  "Open a journal entry as a markdown file with today's datestamp."
  (interactive)
  (find-file (concat "~/Nextcloud/Notes/"
                     (format-time-string org-link-date-stamp-format (current-time))
                     ".md")))


#+END_SRC
* Magit
** SSH Stuff
*** Linux
    I nee to copy some environment variables from my shell in order to use
    =ssh-agent=. Please note that this also makes everything else (including
    =rsync-dired=) work with =ssh-agent= too.

    TODO - Install this automatically

    #+BEGIN_SRC emacs-lisp
      (cond
       ((string-equal system-type "gnu/linux")
        (progn
          (require 'exec-path-from-shell)
          (exec-path-from-shell-copy-env "SSH_AGENT_PID")
          (exec-path-from-shell-copy-env "SSH_AUTH_SOCK")
          )))
    #+END_SRC

** Keymaps
   I like having my own custom keymap for Magit.

#+BEGIN_SRC emacs-lisp
  (progn
    (define-prefix-command 'tp/magit/key-map)
    (define-key tp/magit/key-map (kbd "s") 'magit-status)
    (define-key tp/magit/key-map (kbd "b") 'magit-branch-popup)
    (define-key tp/magit/key-map (kbd "c") 'magit-checkout)
    (define-key tp/magit/key-map (kbd "d") 'magit-diff-popup)
    ;; Show the git log for the current file.
    (define-key tp/magit/key-map (kbd "l") 'magit-log-buffer-file))
  (global-set-key (kbd "\C-cm") tp/magit/key-map)
#+END_SRC

   I'm also already using =C-x gg= as a shortcut to jump to the top of a buffer, so
   I'm not a huge fan of Magit using =C-x g= to run =magit-status=. So let's nuke
   that:

   #+BEGIN_SRC emacs-lisp
     (global-unset-key (kbd "C-x g"))
   #+END_SRC
* Timestamp Stuff

#+BEGIN_SRC emacs-lisp
  (defvar current-date-time-format "%a %b %d %H:%M:%S %Z %Y"
    "Format of date to insert with `insert-current-date-time' func
  See help of `format-time-string' for possible replacements")

  (defvar current-date-format-for-org "** %m/%d/%Y"
    "Format of date to insert with `insert-current-date' func for org files.
  See help of `format-time-string' for possible replacements")

  (defvar current-date-format-for-links "%m-%d-%Y"
    "This format works better for HTML links than the org format.")

  (defvar current-date-format "%m/%d/%Y"
    "Format of date to insert with `insert-current-date' func.
  Note the weekly scope of the command's precision.")

  (defvar current-time-format-for-org "*** %H:%M"
    "Format of date to insert with `insert-current-time' func for org files.
  Note the weekly scope of the command's precision.")

  (defvar current-time-format "%H:%M:%S"
    "Format of date to insert with `insert-current-time' func.
  Note the weekly scope of the command's precision.")

  (defvar current-time-format-no-delim "%H%M%S"
    "Format of date with no delimiters.")

  (defun insert-current-date-for-org ()
    "insert the current date as a heading into an org file.
  Uses `current-date-time-format' for the formatting the date/time."
    (interactive)
    (insert (format-time-string current-date-format-for-org (current-time)))
    (insert "\n")
    )

  (defun insert-current-date-for-links ()
    "Insert the current date in a way that works in HTML
    links."
    (interactive)
    (insert (format-time-string current-date-format-for-links (current-time)))
    )

  (defun get-current-date-for-links ()
    "Retrieves the current date in a way that works in HTML
    links."
    (interactive)
    (format-time-string current-date-format-for-links (current-time))
    )

  (defun insert-current-date ()
    "insert the current date into current buffer.
  Uses `current-date-time-format' for the formatting the date/time."
    (interactive)
    (insert (format-time-string current-date-format (current-time)))
    )

  (defun get-current-date ()
    "Returns the current date. Uses `current-date-time-format` for the formatting of the date/time"
    (interactive)
    (format-time-string current-date-format (current-time)))

  (defun insert-current-time-for-org ()
    "insert the current time as a heading into an org file."
    (interactive)
    (insert (format-time-string current-time-format-for-org (current-time)))
    (insert "\n")
    )

  (defun insert-new-day-headings ()
    "insert the 'new day' heading into an org file"
    (interactive)
    (insert-current-date-for-org)
    (insert "\n")
    (insert-current-time-for-org)
    (insert "\n")
    )

  (defun insert-current-date-time ()
    "insert the current date and time into current buffer.
  Uses `current-date-time-format' for the formatting the date/time."
    (interactive)
    (insert "==========\n")
					  ;       (insert (let () (comment-start)))
    (insert (format-time-string current-date-time-format (current-time)))
    (insert "\n")
    )

  (defun insert-current-time ()
    "insert the current time (1-week scope) into the current buffer."
    (interactive)
    (insert (format-time-string current-time-format (current-time)))
    )

  (defun get-current-time ()
    "Returns the current time (1-week scope).."
    (interactive)
    (format-time-string current-time-format (current-time)))

  (defun get-current-time-no-delim ()
    "Returns the current time with no delimiters."
    (interactive)
    (format-time-string current-time-format-no-delim (current-time)))
#+END_SRC
* Dev
** Misc
*** Projectile
[[https://www.projectile.mx/en/latest/usage/][Projectile]] is a fantastic package that makes it easier to work within a project
using Emacs.

I'm not a huge fan of it's built-in prefix though so let's fix that:

#+BEGIN_SRC emacs-lisp
(setq projectile-completion-system 'helm)
(setq projectile-keymap-prefix (kbd "C-c p"))
(setq projectile-globally-ignored-directories
      (append '(".git" ".pytest_cache" ".vscode" "Output" "venv" "venv3" "node_modules")))
(setq projectile-globally-ignored-files
      (append '("*~" "*#" "log.html" "output.xml" "report.html")))
#+END_SRC

*** Indent
    This turns off tabs and replaces them with 4 spaces for most major
    modes:

 #+BEGIN_SRC emacs-lisp
   (setq-default c-basic-offset 4)
   (setq-default indent-tabs-mode nil)
 #+END_SRC
*** Highlighting the Current Line
#+BEGIN_SRC emacs-lisp
  (global-hl-line-mode)
#+END_SRC
*** Line numbers
Turn them off by default
#+BEGIN_SRC emacs-lisp
(setq display-line-numbers-type nil)
#+END_SRC
** Robot Mode
*** Bootstrap
 #+BEGIN_SRC emacs-lisp
   (add-to-list 'auto-mode-alist
                '("\\.txt\\'" . robot-mode))
   (add-to-list 'auto-mode-alist
                '("\\.robot\\'" . robot-mode))
 #+END_SRC
*** Keymaps
 #+BEGIN_SRC emacs-lisp
   (add-hook 'robot-mode-hook
             (lambda () (local-set-key (kbd "<f5>") #'robot-mode-find-kw)))
 #+END_SRC
** Lisp
*** Paredit

Let's just turn it on for everything :smile:

  #+BEGIN_SRC emacs-lisp
    (use-package paredit
      :hook ((emacs-lisp-mode . enable-paredit-mode)
             (eval-expression-minibuffer-setup . enable-paredit-mode)
             (ielm-mode . enable-paredit-mode)
             (lisp-mode . enable-paredit-mode)
             (lisp-interaction-mode . enable-paredit-mode)
             (scheme-mode . enable-paredit-mode)))

  #+END_SRC
*** Paren matching
    These customizations make it easier to know where code blocks are.
    #+BEGIN_SRC emacs-lisp
      (show-paren-mode 1)
    #+END_SRC
** REST
*** Verb
#+BEGIN_SRC emacs-lisp
(with-eval-after-load 'org
  (define-key org-mode-map (kbd "C-c C-r") verb-command-map))
#+END_SRC
** Kubernetes
AKA K8S :-)
*** YAML-Related Stuff
I have to do a few funny things to my YAML config to make it work with all of my k8s-related things:

#+BEGIN_SRC emacs-lisp
(use-package! yaml-mode
  :mode "\\.yaml.gotmpl$")
#+END_SRC
** Python
Wow, my Emacs is currently configured as a very sophisticated Python IDE, and I haven't even had to configure anything in this file yet :-) But I think I have configure =lsp-treemacs= here:

#+BEGIN_SRC emacs-lisp
(use-package! lsp-treemacs
  :after lsp)
#+END_SRC

#+RESULTS:

* Text Search
** Swiper and Ivy

The killer feature here is using Swiper instead of incremental search when hitting C-s:

#+BEGIN_SRC emacs-lisp
(ivy-mode 1)
(setq ivy-use-virtual-buffers t)
(setq enable-recursive-minibuffers t)
(global-set-key "\C-s" 'swiper)
(global-set-key (kbd "C-c C-r") 'ivy-resume)
(global-set-key (kbd "<f6>") 'ivy-resume)
(define-key minibuffer-local-map (kbd "C-r") 'counsel-minibuffer-history)
#+END_SRC
* Web Browsing
  Make =eww= create a new buffer if executed from a non-=eww= buffer. This allows you to
  easily create more than one =eww= buffer. Also, I copied this from
  https://emacs.stackexchange.com/a/24477/8228, which was copied from Xah's erogemacs tips
  (like a lot of stuff in this file).

  #+BEGIN_SRC emacs-lisp
    ;; Auto-rename new eww buffers
    (defun xah-rename-eww-hook ()
      "Rename eww browser's buffer so sites open in new page."
      (rename-buffer "eww" t))
    (add-hook 'eww-mode-hook #'xah-rename-eww-hook)
  #+END_SRC

* Scratch Buffer
** Saving And Restoring The Buffer
   Also stole from EOS:
   #+BEGIN_SRC emacs-lisp
     (defun eos/core/save-persistent-scratch ()
       "Write the contents of *scratch* to the file name
     `persistent-scratch-file-name'."
       (with-current-buffer (get-buffer-create "*scratch*")
         (write-region (point-min) (point-max) "~/.emacs.d/persistent-scratch")))

     (defun eos/core/load-persistent-scratch ()
       "Load the contents of `persistent-scratch-file-name' into the
       scratch buffer, clearing its contents first."
       (interactive)
       (if (file-exists-p "~/.emacs.d/persistent-scratch")
           (with-current-buffer (get-buffer "*scratch*")
             (delete-region (point-min) (point-max))
             (insert-file-contents "~/.emacs.d/persistent-scratch"))))

     (add-hook 'after-init-hook 'eos/core/load-persistent-scratch)
     (add-hook 'kill-emacs-hook 'eos/core/save-persistent-scratch)
   #+END_SRC
** Showing All Open Buffers in the Mini-Buffer
#+BEGIN_SRC emacs-lisp
(define-key global-map (kbd "C-x b") 'helm-mini)
#+END_SRC
* Syncing
  I like to sync some of my files using Syncthing. The problem is when I do the following:

  1. Edit a file on my laptop and save and sync without killing the buffer.
  2. Edit the same file on my phone using Orgzly and sync.
  3. Sync everything on my laptop and visit the same buffer in Emacs.

  At this point I would be looking at the version of the file from step 1 on my laptop. To
  view the step 2 updates I would need to manually revert the buffer, and chances are I
  wouldn't know which buffers to revert.

  I therefore am turning on =global-auto-revert-mode= to see if that helps.

  #+BEGIN_SRC emacs-lisp
    (global-auto-revert-mode 1)
  #+END_SRC
* Window Management
** Functions
   I just love this, it was stupid simple to write and I think I use it a least 10 times a
   day. It "moves" the current window into a new frame.

   What does that mean? Let's say you split your current window (which is called a *frame*
   in Emacs) into 2 using =Ctrl-3= or something like that and then realize that you would
   /really/ like to focus on the buffer in that "split" (which is called a *window* in
   Emacs). Wouldn't it be great if you could just move it to a new frame?

   #+BEGIN_SRC emacs-lisp
     (defun tp/wm/move-window-to-new-frame ()
       "Take the content of the current window and move it to its own
        frame"
       (interactive)
       (make-frame)
       (delete-window))
   #+END_SRC
* Buffer Management
** ibuffer
   First let's set the keystrokes:

#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-x C-b") 'ibuffer) ;; Use Ibuffer for Buffer List
#+END_SRC

   Next let's group buffers:

   #+BEGIN_SRC emacs-lisp
     (setq ibuffer-saved-filter-groups
           '(("home"
              ("emacs-config" (filename . "emacs-init.org"))
              ("Org" (or (mode . org-mode)
                         (filename . "OrgMode")
                         (name . "\*Org Agenda\*")))
              ("Dired" (or (mode . dired-mode)
                           (name . "\*Sunrise\*")))
              ("Dev" (or (mode . python-mode)
                         (mode . robot-mode)))
              ("Magit" (or (name . "\*magit")
                           (name . "magit")
                           (mode . magit-mode)))
              ("EXWM" (or (mode . exwm-mode)
                          (name . "\*EXWM\*")))
              ("Shells" (or (mode . eshell-mode)
                            (mode . shell-mode)
                            (mode . comint-mode))))
             ("eww" (or (mode . eww-mode)
                        (mode . eww-bookmark-mode)))
             ("Help" (or (name . "\*Help\*")
                         (name . "\*Apropos\*")
                         (name . "\*info\*")))))

     (add-hook 'ibuffer-mode-hook
               '(lambda ()
                  (ibuffer-switch-to-saved-filter-groups "home")))

   #+END_SRC
* Encryption
** GPG
*** Easy GPG Assistant
    This is Emac's built-in interface GPG that I like to use to transparently encrypt
    entire files. When you use it you should put something like this at the top of
    your file:

#+BEGIN_EXAMPLE
# -*- mode:org; epa-file-encrypt-to: ("something@tompurl.com") -*-
#+END_EXAMPLE

You can replace the email address with the public key's id.

    #+BEGIN_SRC emacs-lisp
      (require 'epa-file)
      (epa-file-enable)
      (setq epa-pinentry-mode 'loopback)
    #+END_SRC

    I hate to admit it but my current process for whole-file encryption goes like
    this:

    1. I add a line that looks something like this to the top of my file:
       - =# -*- mode:org; epa-file-encrypt-to: ("5BF5A514D04978DD") -*-=
    2. I then drop into the command line and run a command that looks something like
       this:
       - =gpg --output foo.org.gpg --encrypt --recipient 5BF5A514D04978DD foo.org
    3. I then test that I can open =foo.org.gpg= in Emacs seamlessly.
*** Org-mode
I use this to encrypt sections of org documents. You just have to tag the
section with =crypt=.

#+BEGIN_SRC emacs-lisp
(require 'org-crypt)
(org-crypt-use-before-save-magic)
(setq org-crypt-key "5BF5A514D04978DD")
#+END_SRC
** Authinfo File and Referencing Passwords
I would like to reference passwords from files that *aren't* stored in version
control. Here's an easy way to do that with an [[~/.authinfo.gpg]] file.

I got this function from [[https://www.reddit.com/r/emacs/comments/kv2ziq/how_to_encrypt_your_passwords_with_emacs/][the following reddit discussion]].

#+BEGIN_SRC emacs-lisp
(defun tp/lookup-password (&rest keys)
  (when-let ((result (apply #'auth-source-search keys)))
    (funcall (plist-get (car result) :secret))))
#+END_SRC

* Bookmarks
   Since I run Emacs as a user service it is unceremoniously killed every time I
   log out of a session. My bookmarks are therefore never saved. This fixes that
   by saving my bookmarks every time I change one.

   #+BEGIN_SRC emacs-lisp
     (setq bookmark-save-flag 1)
   #+END_SRC
* Server stuff

#+BEGIN_SRC emacs-lisp
(require 'server)
(or (eq (server-running-p) t)
    (server-start))
#+END_SRC
* Epub
** nov
#+BEGIN_SRC emacs-lisp
(add-to-list 'auto-mode-alist '("\\.epub\\'" . nov-mode))
(defun my-nov-font-setup ()
  (face-remap-add-relative 'variable-pitch
                           :family "ETBembo"
                           :size 220))
(add-hook 'nov-mode-hook 'my-nov-font-setup)
#+END_SRC

* Multimedia
** Macros
*** flac2mp3

It's a royal pain in a shell script to loop over a list of files using the
shell, so here's what I do instead.

1. =find . -name "*flac*" > flac.sh=
2. Add a shebang and =set -e= to the top of =flac.sh=
3. Execute this macro on every line after positioning the cursor in the first column.

#+BEGIN_SRC emacs-lisp
(fset 'tp/mm/flac2mp3
      (lambda (&optional arg)
        "Keyboard macro."
        (interactive "p")
        (kmacro-exec-ring-item
         (quote ([67108896 5 134217847 1 102 102 109 112 101 103 32 45 105 32 34 5 34 32 45 97 98 32 51 50 48 107 32 45 109 97 112 95 109 101 116 97 100 97 116 97 32 48 32 45 105 100 118 backspace 51 118 50 95 118 101 114 115 105 111 110 32 51 32 34 25 backspace backspace backspace backspace 109 112 51 34 14 1] 0 "%d")) arg)))
#+END_SRC

* Registers
** Org
#+BEGIN_SRC emacs-lisp
  (set-register ?w (cons 'file (concat org-directory "/WorkLogs.org")))
  (set-register ?i (cons 'file (concat org-directory "/index.org")))
  (set-register ?j (cons 'file (concat org-directory "/journal/" (format-time-string "%Y%m%d") ".org")))
#+END_SRC
** Misc
#+BEGIN_SRC emacs-lisp
  (set-register ?e (cons 'file "~/.doom.d/config.org"))
  (set-register ?s (get-buffer "*scratch*"))
#+END_SRC
* Shell Stuff
** Eshell
*** eshell-bookmark
This is super helpful, especially when used with tramp to access things like
remote servers or docker containers:

#+BEGIN_SRC emacs-lisp
(use-package eshell-bookmark
  :after eshell
  :config
  (add-hook 'eshell-mode-hook #'eshell-bookmark-setup))
#+END_SRC
*** Aliases
#+BEGIN_SRC emacs-lisp
(defalias 'ff 'find-file)
#+END_SRC

* RSS
** Elfeed
#+BEGIN_SRC emacs-lisp
(setq rmh-elfeed-org-files (list "~/gtd/org/RSS_Feeds.org"))
#+END_SRC
* Writing
** Blogging
The writefreely mode for Emacs makes it trivially easy to write blog posts.

#+BEGIN_SRC emacs-lisp
(use-package writefreely
  :after org
  :config (setq writefreely-auth-token (tp/lookup-password :host "write.as")))
#+END_SRC
** Writer Words Goal
I'm trying this out to see if it will improve the quality and quantity of my
prose writing.

#+BEGIN_SRC emacs-lisp
(use-package wwg)
#+END_SRC

* Email
** mu4e / protonmail
#+BEGIN_SRC emacs-lisp
(when (string= "poochie" (system-name))
  (add-to-list 'load-path "/home/tom/.nix-profile/share/emacs/site-lisp/mu4e")
  (add-to-list 'gnutls-trustfiles (expand-file-name "~/.config/protonmail/bridge/cert.pem"))
  (setq +mu4e-backend 'offlineimap)
  (use-package mu4e
    :custom
    (gnutls-log-level 2)
    (mu4e-attachment-dir "~/Downloads")
    (mu4e-get-mail-command "offlineimap")
    (mu4e-sent-folder "/protonmail-tompurl/INBOX")
    (mu4e-trash-folder "/protonmail-tompurl/Trash")
    (mu4e-drafts-folder "/protonmail-tompurl/Drafts")
    (mu4e-refile-folder "/protonmail-tompurl/Archive")
    (mu4e-change-filenames-when-moving nil)   ; t for mbsync
    (message-send-mail-function 'smtpmail-send-it)
    (smtpmail-auth-credentials "~/.authinfo.gpg")
    (smtpmail-smtp-server "127.0.0.1")
    ;; (smtpmail-stream-type 'starttls)
    (smtpmail-smtp-service 1025)
    )
  )
#+END_SRC
* Tabs
Let's try this out.

#+BEGIN_SRC emacs-lisp :exports code-or-both
(use-package! centaur-tabs
  :demand
  :config
  (centaur-tabs-mode t)
  :bind
  ("C-<prior>" . centaur-tabs-backward)
  ("C-<next>" . centaur-tabs-forward))


#+END_SRC
